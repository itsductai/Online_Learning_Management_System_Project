import axios from "axios";

const API_URL = "http://localhost:7025/api"; // ƒê∆∞·ªùng d·∫´n g·ªëc t·ªõi API backend

// T·∫°o m·ªôt instance axios v·ªõi baseURL c·ªë ƒë·ªãnh
const api = axios.create({
  baseURL: API_URL,
});

//T√≥m t·∫Øt ho·∫°t ƒë·ªông c·ªßa api.js
// Khi g·ªçi API: T·ª± ƒë·ªông g·∫Øn JWT Token v√†o header.
// Khi g·∫∑p l·ªói 401 Unauthorized: T·ª± ƒë·ªông refresh token.
// N·∫øu refresh token th·∫•t b·∫°i: ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng.

// Th√™m: interceptor ƒë·ªÉ th√™m token v√†o header c·ªßa t·∫•t c·∫£ request
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token'); // L·∫•y token t·ª´ localStorage
  if (token) {
    config.headers.Authorization = `Bearer ${token}`; // Th√™m token v√†o header Authorization
  }
  return config;
}, (error) => {
  return Promise.reject(error); // X·ª≠ l√Ω l·ªói n·∫øu request c√≥ v·∫•n ƒë·ªÅ
});

// üõ† Interceptor response: X·ª≠ l√Ω l·ªói 401 Unauthorized (Token h·∫øt h·∫°n)
api.interceptors.response.use(
  (response) => response, // N·∫øu response th√†nh c√¥ng, tr·∫£ v·ªÅ b√¨nh th∆∞·ªùng
  async (error) => {
    const originalRequest = error.config; // Gi·ªØ l·∫°i request ban ƒë·∫ßu

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // ƒê√°nh d·∫•u request n√†y ƒë√£ retry 1 l·∫ßn

      try {
        // G·ª≠i request l·∫•y Access Token m·ªõi
        const refreshToken = localStorage.getItem("refreshToken");
        const res = await axios.post(`${API_URL}/auth/refresh-token`, { refreshToken });

        if (res.status === 200) {
          const newAccessToken = res.data.token; // L·∫•y Access Token m·ªõi
          localStorage.setItem("token", newAccessToken); // C·∫≠p nh·∫≠t v√†o localStorage

          // C·∫≠p nh·∫≠t header Authorization & g·ª≠i l·∫°i request c≈©
          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
          return api(originalRequest);
        }
      } catch (refreshError) {
        console.error("L·ªói khi refresh token:", refreshError);
        localStorage.removeItem("token"); // X√≥a token n·∫øu refresh th·∫•t b·∫°i
        localStorage.removeItem("refreshToken"); // X√≥a refresh token
        window.location.href = "/login"; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      }
    }

    return Promise.reject(error); // Tr·∫£ l·ªói v·ªÅ n·∫øu kh√¥ng th·ªÉ x·ª≠ l√Ω
  }
);

// API ƒëƒÉng nh·∫≠p
export const loginAPI = (email, password) => {
  return api.post(`/auth/login`, { email, password });
};

// API ƒëƒÉng k√Ω
export const registerAPI = (name, email, password) => {
  return api.post(`/auth/register`, { name, email, password });
};

// API l·∫•y danh s√°ch kh√≥a h·ªçc
export const coursesAPI = async () => {
  try {
    const res = await api.get(`/courses`);
    return res.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc:", error);
    return [];  // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu th·∫•t b·∫°i
  }
};

// API th√™m kh√≥a h·ªçc m·ªõi
export const addCourseAPI = async (courseData) => {
  try {
    const res = await api.post('/courses', courseData);
    return res.data;
  } catch (error) {
    console.error("L·ªói khi th√™m kh√≥a h·ªçc:", error);
    throw error; // N√©m l·ªói ƒë·ªÉ component x·ª≠ l√Ω
  }
};

// API c·∫≠p nh·∫≠t kh√≥a h·ªçc
export const updateCourseAPI = async (courseId, courseData) => {
  try {
    const res = await api.put(`/courses/${courseId}`, courseData);
    return res.data;
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:", error);
    throw error;
  }
};

// API x√≥a kh√≥a h·ªçc
export const deleteCourseAPI = async (courseId) => {
  try {
    const res = await api.delete(`/courses/${courseId}`);
    return res.data;
  } catch (error) {
    console.error("L·ªói khi x√≥a kh√≥a h·ªçc:", error);
    throw error;
  }
};